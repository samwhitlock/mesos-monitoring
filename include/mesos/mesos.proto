/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mesos;

option java_package = "org.apache.mesos";
option java_outer_classname = "Protos";


message FrameworkID {
  required string value = 1;
}


message OfferID {
  required string value = 1;
}


message SlaveID {
  required string value = 1;
}


message TaskID {
  required string value = 1;
}


message ExecutorID {
  required string value = 1;
}


message Param {
  required string key = 1;
  required string value = 2;
}


// TODO(benh): Eliminate this once some notion of a protocol buffer
// ResourceOffer object makes it's way to the Mesos interface.
message Params {
  repeated Param param = 1;
}


// TODO(benh): Add support for attributes.
// message Attribute {
//   required string name = 1;
//   required string value = 2;
// }


// TODO(benh): Add better support for resources.
message Resource {
  enum Type {
    SCALAR = 0;
    RANGES = 1;
    SET = 2;
  }

  message Scalar {
    required double value = 1;
  }

  message Range {
    required uint64 begin = 1;
    required uint64 end = 2;
  }

  message Ranges {
    repeated Range range = 1;
  }

  message Set {
    repeated string item = 1; 
  }

  required string name = 1;
  required Type type = 2;
  optional Scalar scalar = 3;
  optional Ranges ranges = 4;
  optional Set set = 5;
}


message ExecutorArgs {
  required FrameworkID framework_id = 1;
  required ExecutorID executor_id = 2;
  required SlaveID slave_id = 3;
  required string hostname = 4;
  optional bytes data = 5;
};


message TaskDescription {
  required string name = 1;
  required TaskID task_id = 2;
  required SlaveID slave_id = 3;
  repeated Resource resources = 4;
  optional ExecutorInfo executor = 5;
  optional bytes data = 6;
}


enum TaskState {
  TASK_STARTING = 0;
  TASK_RUNNING = 1;
  TASK_FINISHED = 2;
  TASK_FAILED = 3;
  TASK_KILLED = 4;
  TASK_LOST = 5;
}


message TaskStatus {
  required TaskID task_id = 1;
  required TaskState state = 2;
  optional string message = 4; // Possible message explaining state.
  optional bytes data = 3;
}


message ExecutorInfo {
  required ExecutorID executor_id = 1;
  required string uri = 2;
  repeated Resource resources = 5;
  optional Params params = 3;
  optional bytes data = 4;
}


message FrameworkInfo {
  required string user = 1;
  required string name = 2;
  required ExecutorInfo executor = 3;
}


message SlaveInfo {
  required string hostname = 1;
  // TODO(benh,andyk): Send bound ports, not just hostname.
  required string webui_hostname = 2;
  optional int32 webui_port = 4 [default = 8081];
  repeated Resource resources = 3;
}


message ResourceRequest {
  optional SlaveID slave_id = 1;
  repeated Resource resources = 2;
}


message Offer {
  required OfferID id = 1;
  required FrameworkID framework_id = 2;
  required SlaveID slave_id = 3;
  required string hostname = 4;
  repeated Resource resources = 5;
  repeated ExecutorID executor_ids = 6;
}


message Filters {
  // Time to consider unused resources refused.
  optional double refuse_seconds = 1;
}


enum Status {
  OK = 0;

  DRIVER_NOT_RUNNING = 1;
  DRIVER_ALREADY_RUNNING = 2;
  DRIVER_ABORTED = 3;
  DRIVER_STOPPED = 4;
}
